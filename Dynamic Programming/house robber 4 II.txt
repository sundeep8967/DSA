 int n=nums.size();
        if(n==1)return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        
        
        vector<int> dp( n , 0 );
        
        
    
 //first case : not considering last house in this case ;    
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        
        for(int i=2;i<n-1;i++){
            dp[i]=max( dp[i-1] , nums[i]+dp[i-2]  );
        }
        
        int ans1=dp[n-2];
  // second case : not considering the first house ;
        
        dp[1]=nums[1];
        dp[2]=max(nums[2] , nums[1] ) ;
        
        for(int i=3 ; i<n ; i++ ){
            dp[i]=max(dp[i-1] , nums[i]+dp[i-2]);
        }
        
        int ans2=dp[n-1];
        return max(ans1,ans2);
        
        
        
        
       // int mx=max( dp[n-1] ,  );
        return dp[n-1];
    }