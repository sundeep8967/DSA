class Trie {
    
    Trie *children[26];
    bool isendofword;
    
public:
    Trie() {
        isendofword=false;
        for(int i=0;i<26;i++){
            children[i]=nullptr;
        }
        
        
    }
    
    void insert(string word) {
        
        Trie *curr=this;
        
        for(char c : word){
            
            if(!(curr->children[c-'a'])){
                curr->children[c-'a'] = new Trie;
            }
            curr=curr->children[c-'a'];
            
        }
        curr->isendofword=true;
        
        
        
        
        
    }
    
    bool search(string word) {
        
        
        Trie* curr=this;
        
        for(char c : word){
            
            curr=curr->children[c-'a'];
                
                if(!curr){
                    return false;
                }
            
            
             }
        
            if(curr->isendofword==true){
                return true;
            }
            
            return false;
                
        
    }
    
    bool startsWith(string prefix) {
        
        Trie* curr=this;
        
        for(char c : prefix ){
            
            curr=curr->children[c-'a'];
            
            if(!curr){
                return false;
            }
            
            
            
            
            
        }
        
        
        
        return true;
        
        
        
        
        
        
        
        
    }
};