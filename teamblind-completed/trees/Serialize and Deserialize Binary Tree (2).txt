
    string serialize(TreeNode* root) {
          string str="";
        if(!root) return str;
        
        
        queue<TreeNode*> q;
        
        q.push(root);
      
        while(!q.empty()){
            
            
           
           TreeNode *curr=q.front();
        q.pop();
            
             if(curr==NULL) str.append("#,");
        else str.append(to_string(curr->val)+",");
            
            
             if(curr!=NULL)
        {
            q.push(curr->left);
            q.push(curr->right);
        }
            
            
            
        }
        
     
        
        
        
        return str;
        
        
    }
    
    
    
string seRRialize(TreeNode* root) {
    string str="";
    if(!root) return str;
    queue<TreeNode*>q;
    q.push(root);
    while(!q.empty())
    {
        // if null, append #, and if not null, append element and comma
        TreeNode *node=q.front();
        q.pop();
        if(node==NULL) str.append("#,");
        else str.append(to_string(node->val)+",");
        if(node!=NULL)
        {
            q.push(node->left);
            q.push(node->right);
        }
    }
    cout<<str;
    return str;
}
    
    
    
    
    
    
    
    
    

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        
        
        if(data.size()==0) return 0;
        
        stringstream s(data);
        string str;
        getline(s,str,',');
        
        TreeNode *root=new TreeNode(stoi(str ));
        
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty()){
            
            
            TreeNode* node=q.front();
            q.pop();
            
            getline(s,str,',');
            
            if(str=="#"){
                node->left=NULL;
            }
            else{
                TreeNode* temp1=new TreeNode(stoi(str));
                node->left=temp1;
                q.push(temp1);
            }
            
              getline(s,str,',');
            
            if(str=="#"){
                node->right=NULL;
            }
            else{
                TreeNode* temp2=new TreeNode(stoi(str));
                node->right=temp2;
                q.push(temp2);
            }
                 
    
        }
       
        
        return root;
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }