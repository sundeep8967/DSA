class Solution {
public:
    
    void bfs(TreeNode* root ,unordered_map<TreeNode*,TreeNode*>&mp){
        
        
        queue<TreeNode*> q;
        q.push(root);

        
        while(!q.empty()){
            
            TreeNode *node=q.front();
            q.pop();
            int n=q.size();
           
            
                if(node->left){
                    q.push(node->left);
                    mp[node->left]=node;
                }
                if(node->right){
                    q.push(node->right);
                        mp[node->right]=node;
                        
                
            }
            
            
        }
        
        for(auto node : mp){
          cout<<node.first->val<<" ";
        }
        
        
        
        
    }
    
    
    
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        unordered_map<TreeNode*,TreeNode*>mp;
        
        bfs(root, mp);
        
        unordered_map<TreeNode*,bool>vis;
        
        vis[target]=true;
        
        queue<TreeNode*> q;
        q.push(target);
        int current=0;
        
        
        while(!q.empty()){
            
            int n=q.size();
            
            if(current==k) break;
            
            current++;
            
            while(n--){
                
                TreeNode* node=q.front();
                q.pop();
                
                
                if(node->left && !vis[node->left]  ){
                    q.push(node->left);
                    vis[node->left]=true;
                    
                }
                
                if(node->right && !vis[node->right]  ){
                    q.push(node->right);
                    vis[node->right]=true;
                    
                }
                
                if(mp[node] && !vis[mp[node]] ){
                    vis[mp[node]]=true;
                    q.push(mp[node]);
                }
                
                
                
            }
            
            
        }
        
        
        
        
        
        
        vector<int>po;
        int l=q.size();
        for(int i=0;i<l;i++){
            po.push_back(q.front()->val);
            q.pop();
        }
        
        
        return po;
    }
};