class Solution {
public:
    
    vector<int> parent;
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        
        
        int n=edges.size();
        
        parent.resize(n+1);
        
        for(int i =0 ;i <n;i++){
            parent[i]=i;
        }
        
        for(auto &edge : edges){
            
            
            if( find(edge[0])==find(edge[1])   ) return edge;
            
            uunion(edge[0],edge[1]);
            
            
            
        }
 
    return edges[0];
}
    
    
    
     int find(int i ){
         
         if(i!=parent[i]){
             parent[i]=find(parent[i]);
         }
         
         return parent[i];
         
     }
    
        void uunion(int i , int j){
            
            int iroot=find(i);
            int jroot=find(j);
            
            if(iroot!=jroot){
                parent[jroot]=iroot;
            }
            
            
            
        }
        
        
        
    
};