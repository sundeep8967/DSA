// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
   vector<string> ans;
   int n;
    
    vector<string> findPath(vector<vector<int>> &m, int n1) {
        // Your code goes here
        n=n1;
        //if(m[0][0]!=1 || m[n-1][n-1]!=1) return ;
         vector<string> ans;
       vector<vector<int>> maze=m;
        dfs(ans,maze ,0,0, ""  );
        
        return ans;
    }
    
    
    void dfs(vector<string>&ans , vector<vector<int>> &maze , int i , int j ,string a ){
        
        if(i<0 || j<0 || i>=n || j>=n || maze[i][j]==-1 ||maze[i][j]==0 ) return ;
        
        if(i==n-1 && j==n-1) {
           
            ans.push_back(a);
           
            return ;}
        
       
        
        maze[i][j]=-1;
        dfs(ans,maze ,i, j+1 ,a+'R');
        dfs(ans,maze ,i+1 , j ,a+'D');
        dfs(ans,maze ,i-1 , j ,a+'U' );
        dfs(ans,maze ,i , j-1, a+'L');
        maze[i][j]=1;
        
    }
    
    
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends