// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  
    private :
    
    bool dfs(vector<int>adj[] , int vis[] , int dfsvi[] , int node){
        vis[node]=1;
        dfsvi[node]=1;
        for(auto it : adj[node]){
            
            if(!vis[it]){
                if(dfs(adj,vis,dfsvi, it ))    return true;
            }
            else if(dfsvi[it])
                    return true;
            
        }
        dfsvi[node]=0;
        return false;
        
    };
   
    
    
    
    public:
    // Function to detect cycle in a directed graph.
    
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        
        int vis[V],dfsVis [V];
        memset(vis,0,sizeof vis);
        memset(dfsVis ,0,sizeof dfsVis);
        // vector<int >vis(V,0);
        // vector<int> dfsVis(V,0);

        for (int i=0; i<V;i++){
            if(!vis[i]){
                if (dfs(adj,vis,dfsVis,i)){
                    return true;
                }
            }
        }
        return false;
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends