class Solution {
public:
     
    queue<pair<int,int>>q1;
    vector<vector<int>> vis;   
    
    void bfs(vector<vector<int>> &grid,int i , int j , int n ,int m){
        
        queue<pair<int ,int >> q ; 
        vis[i][j]=1;
        q.push({i,j});
        q1.push({i,j});
        pair<int,int> dir[4]={{1,0},{0,1},{-1,0},{0,-1}};
        while(!q.empty()){
            
            pair<int,int> p=q.front();
            q.pop();
            
            for(int i=0;i<4;i++){
                int j=p.first+dir[i].first;
                int k=p.second+dir[i].second;
                if(j<0 || k<0 || j>=n || k>=m || vis[j][k]==1 || grid[j][k]==0 ) continue;
                
                vis[j][k]=1;
                q.push({j,k});
                q1.push({j,k});
                
            }//for
        }//while
    }//bfs
    
    
    
    int bfs2(vector<vector<int>> & grid ,int n , int m){
        
          pair<int,int> dir[4]={{1,0},{0,1},{-1,0},{0,-1}};
        while(!q1.empty()){
            
               pair<int,int> p=q1.front();
               q1.pop();
               int x=p.first;
               int y=p.second;
            for(int i=0;i<4;i++){
                
                int j=p.first+dir[i].first;
                int k=p.second+dir[i].second;
                
                if(j<0 || k<0 || j>=n ||k>=m || vis[j][k]==1 ) continue;
                
                  if(vis[j][k]==0  && grid[j][k]==1){
                      return grid[x][y]-1;
                  }
                    grid[j][k]=grid[x][y]+1;
                    vis[j][k]=1;
                      q1.push({j,k});
                    
                }//for
            }//while
            
            return 0;
        }
    
    
    int shortestBridge(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();
        vis.resize(n+1 , vector<int>(m+1 ,0));
        int flag=0;
        int i,j;
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(grid[i][j]==1){
                    bfs(grid , i , j , n , m );
                    flag=1;
                    break;
                }
            }//nested for 
            
            if(flag==1){break;}
            
        }//big for 
        
        
        int ans =bfs2(grid, n , m ) ;
            
            return ans;
        
        
        
    }
};