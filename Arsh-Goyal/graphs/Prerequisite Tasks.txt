// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:








   int dfs(int cur ,  vector<int> graph[] , vector<int>&vis ,vector<int>&dvis){
       
       vis[cur]=1;
       dvis[cur]=1;
      for(auto node : graph[cur]){
	        
	            if(!vis[node]){
	                if(dfs(node , graph , vis , dvis)) return true  ;
	            }else if(dvis[node]) return true;
	        
	    }
	    dvis[cur]=0;
	    
	    return false;
       
   }
   


	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    
	    vector<int> graph[N];
	    
	    for(auto pre : prerequisites){
	      graph[pre.second].push_back(pre.first);
	     
	    
	    }
	    
	    vector<int>vis(N,0),dvis(N,0);
	    
	    for(int i=0;i<N;i++){
	            
	            if(!vis[i]){
	                if(dfs(i , graph , vis , dvis)) return false;
	            
	        }
	    }
	    return true;
	    
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends