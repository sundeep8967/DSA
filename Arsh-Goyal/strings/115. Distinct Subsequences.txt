class Solution {
public:
    
    //(((((((first basic method)))))))
//     int solve(string s , string t  , int i , int j ,  vector<vector<int>> &dp){
        
//         if(j==0) return 1;
        
//         if(i==0 )return 0;
        
//         if(dp[i][j]!=-1) return dp[i][j];
        
//         if(s[i-1]==t[j-1]){
//            return dp[i][j]=solve(s,t,i-1,j-1,dp)+solve(s,t,i-1 , j,dp);
//         }
           
        
//            return dp[i][j]=solve(s,t,i-1,j,dp);
        
        
        
        
        
        
//     }
    
    
    
//     int numDistinct(string s, string t) {
    
//         int n=s.size();
//         int m=t.size();
//         vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
//         return solve(s , t , n, m , dp );
        
        
//     }
    
    
////////(((((((((((((((second tabulation bottom up approach working submitted method)))))))))))))))
    
//     int numDistinct(string s, string t) {
        
        
        
//      int n=s.size();
//         int m=t.size();
        
//         vector<vector<double>> dp(n+1 , vector<double>(m+1 , 0));
        
//         for(int i=0;i<=n;i++)dp[i][0]=1;
//         for(int j=1;j<=m;j++)dp[0][j]=0;
        
        
//         for(int i=1;i<=n;i++){
//             for(int j=1;j<=m;j++){
       
//                 if(s[i-1]==t[j-1]){
//                     dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
//                 }
//                 else{
//                 dp[i][j]=dp[i-1][j];
//                 }
                
//             }
//         }
        
        
        
//         return (int)dp[n][m];
        
        
        
        
        
        
//     }
    
     ///////(((((((((((((((((space optimized solution for above tabulation )))))))))))))))))
    
    
    
    
    
     int numDistinct(string s, string t) {
    
    
    
    int n=s.size();
    int m=t.size();
         
    
         vector<double> curr(m+1, 0 ) , prev(m+1 , 0);
         
         prev[0]=curr[0]=1;
         
         
         for(int i=1;i<=n;i++){
             for(int j=1;j<=m;j++){
                 
                 if(s[i-1]==t[j-1])curr[j]=prev[j-1]+prev[j];
                 else{
                     curr[j]=prev[j];
                 }
                 
             }
             
             
             prev=curr;
         }
    
    
    
    return (int)curr[m];
    
    
     }
    
    
    
    
    
    
    
    
    
};