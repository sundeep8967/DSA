class Solution {
public:
    
    int dp[4][3][5001];
    int mod=1000000007;
    int dfs(int n,int i,int j){
        
     if(i<0 || j<0 || i>=4 || j>=3 || (i==3 && (j==0 || j==2)))                   
            return 0;
        
        if(n==1) return 1;
        
        if(dp[i][j][n]!=-1)
            return dp[i][j][n];
        
        int a=0;
        
         a=dfs(n-1,i+1,j-2)%mod;
         a=(a+dfs(n-1,i+1,j+2))%mod;
         a=(a+dfs(n-1,i+2,j-1))%mod;
         a=(a+dfs(n-1,i+2,j+1))%mod;
         a=(a+dfs(n-1,i-1,j-2))%mod;
         a=(a+dfs(n-1,i-1,j+2))%mod;
         a=(a+dfs(n-1,i-2,j-1))%mod;
         a=(a+dfs(n-1,i-2,j+1))%mod;
        
        return dp[i][j][n]=a;
        
        
        
    }
    
    
    int knightDialer(int n) {
       int ans=0;
        memset(dp,-1,sizeof(dp));
       for(int i=0;i<4;i++)                                                       // dial Pad
           for(int j=0;j<3;j++)
               ans=(ans+dfs(n,i,j))%mod;
        return ans;
    }
};